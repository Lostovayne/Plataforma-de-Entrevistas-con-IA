name: Gemini PR Reviewer

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  review-pr:
    runs-on: ubuntu-latest
    steps:
      # Checkout del código
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Configurar Bun (última versión)
      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest # Usa la última versión de Bun

      # Instalar dependencias
      - name: Install Dependencies
        run: bun install
        env:
          BUN_INSTALL_CACHE_DIR: ~/.bun/cache # Directorio de caché de Bun

      # Cache explícito para optimizar futuras ejecuciones
      - name: Cache Bun Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Ejecutar el agente Gemini con Bun
      - name: Run Gemini Agent
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Verificando configuración de Gemini API"
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "Error: GEMINI_API_KEY no está configurada en los secretos de GitHub"
            exit 1
          fi
          cd scripts
          bun run gemini-agent.js

      # Generar el token de la GitHub App
      - name: Generate App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      # Agregar comentario al PR
      - name: Add PR Comment
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const fs = require('fs');
            try {
              const readmeContent = fs.readFileSync('./README.md', 'utf8');
              const summaryMatch = readmeContent.match(/## Resumen de Cambios\n\n([\s\S]*?)(?=##|$)/);
              
              if (!summaryMatch || !summaryMatch[1]) {
                console.log('No se encontró el resumen de cambios en el README');
                return;
              }
              
              const summary = summaryMatch[1].trim();
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `## Revisión de Gemini\n${summary}\n\nEsta revisión fue generada automáticamente por Gemini AI`
              });
            } catch (error) {
              console.error('Error al crear el comentario en la PR:', error);
            }

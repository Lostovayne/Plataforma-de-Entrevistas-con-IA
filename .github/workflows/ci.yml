name: CI Pipeline

# Configuración de triggers: se ejecuta en pushes y PRs a la rama main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Evita ejecuciones redundantes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify:
    runs-on: ubuntu-latest

    # Configuración de estrategia para permitir fallos rápidos
    strategy:
      matrix:
        node-version: [20.x]
      fail-fast: false

    steps:
      # Paso 1: Checkout del código
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Obtener historial completo para análisis de cambios

      # Paso 2: Configuración de caché para optimizar tiempos de construcción
      - name: Cache bun modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Paso 3: Instalación de Bun (runtime JavaScript)
      - name: Install bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 'latest'

      # Paso 4: Instalación de dependencias
      - name: Install dependencies
        run: bun install

      # Verificaciones de calidad del código
      # Verificar formato con Prettier
      - name: Check code formatting
        id: format_check
        run: bun run format:check
        continue-on-error: true # No falla inmediatamente para permitir la corrección automática

      # Corregir automáticamente errores de formato
      - name: Auto-fix formatting errors
        if: steps.format_check.outcome == 'failure'
        run: bun run format

      # Verificar nuevamente el formato después de la corrección
      - name: Re-check code formatting
        if: steps.format_check.outcome == 'failure'
        run: bun run format:check
        continue-on-error: false # Ahora sí falla si persisten los errores

      # Ejecutar linter
      - name: Run linter
        run: bun run lint
        continue-on-error: false # Falla el pipeline si hay errores de linting

      # Paso para corregir automáticamente errores de formato y linting (opcional)
      - name: Auto-fix formatting and linting errors
        if: failure() && github.event_name == 'pull_request'
        run: |
          bun run format
          bun run lint --fix
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Auto-fix formatting and linting errors" || echo "No changes to commit"
          git push || echo "No changes to push"

      # Verificaciones de tipos de TypeScript
      - name: Type check
        run: bun run tsc --noEmit

      # Paso de construcción para verificar que la aplicación se construye correctamente
      - name: Build application
        run: bun run build

  # Job para despliegue (comentado, activar cuando sea necesario)
  # deploy:
  #   needs: verify
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Deploy to production
  #       run: echo "Implementar pasos de despliegue aquí"
